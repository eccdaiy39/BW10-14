/* Subgroup membership testings on BW10-480. This curve comes from the Cyclo(6.5)-k10 family.*/

x:=1168231415840;
r:=x^8-x^6+x^4-x^2+1;
t:=-x^6+x^4-x^2+2;
p:=(x^12-x^10+x^8-5*x^6+5*x^4-4*x^2+4) div 4;
W:=1615424186311295459699234661695330868996109964898075822080001626554259381512322\
226541733412793430500387214753975248863494254092088048666706394161;
Fp:=GF(p);
F5<u>:=ExtensionField<Fp,u|u^5+11>;
F10<v>:=ExtensionField<F5,v|v^2-u>;
E:=EllipticCurve([F10|1,0]);
Et:=EllipticCurve([F5|u^2,0]);
E1:=EllipticCurve([Fp|1,0]);
h1:=(p+1-t) div r;
h2:=#Et div r;
lambda_g1:=x^5;
lambda_g2:=-x^5;
P:=Random(E1);
//Factorization(t^2-4*p);
f:=2^15*3^2*5^3*7*73^3*79*139^3*719567^3*14787739441*18543355807;
tr_psi:=f;
//-P-tr_psi*E1![-P[1],W*P[2],1]+p*P;

function aut(Q,i)
         R:=E![Q[1]/v^2,Q[2]/v^3,1];
         R:=E![Frobenius(R[1],Fp,i),Frobenius(R[2],Fp,i),1];
         R:=E![(-1)^i*R[1], (W)^(i)*R[2],1];
         R:=Et![R[1]*v^2, R[2]*v^3,1];
        return R;
end function;

/*G1 testing*/
P:=h1*Random(E1);
a0:=x^3-x;a1:=-(1+a0*x);
assert (a0+a1*lambda_g1) mod r eq 0;
R:=a0*P+a1*E1![-P[1],W*P[2],1];
if R[3] eq 0 then
   printf("G1 testing is correct!\n");
else
   printf("G1 testing is ERROR!\n");
end if;

/*G2 testing*/

//[1,0,0,-x,0,0,0,0]
Q:=h2*Random(Et);

R:=Q-x*aut(Q,3);
if R[3] eq 0 then
   printf("G2 testing is correct!\n");
else
   printf("G2 testing is ERROR!\n");
end if;