x:=2^7+2^13+2^26-2^32;  
r:=x^8+x^7-x^5-x^4-x^3+x+1;
t:=x^3+1;
p:=(x^3-1)^2*(x^10-x^5+1)div 3 +x^3;
f:=3*5*7*19*61*74172809*103039397557*18033575676307*13953720972139393*290785498341800690827267;
W:=1157899333272590462573976013250064869723630379910219999449010048615785013535770884787331758585706262669165977120498436109785196144383978256105719169395313;
Fp:=GF(p);
F5<u>:=ExtensionField<Fp,u|u^5+4>;
F10<v>:=ExtensionField<F5,v|v^2-u>;
E:=EllipticCurve([F10|0,-3]);
Et:=EllipticCurve([F5|0,-3/u^3]);

/*aut1 is the untwitsting-Frobenius-twisting map*/
function aut1(Q,i)
        R:=Q;
        R:=E![u*R[1],u*v*R[2],1];
        R:=E![Frobenius(R[1],Fp,i),Frobenius(R[2],Fp,i),1];
        R:=Et![1/u*R[1],1/(u*v)*R[2],1];
        return R;
end function;

/*aut2 is the untwitsting-Frobenius-GLV-twisting map*/
function aut2(Q,i)
        R:=Q;
        R:=E![u*R[1],u*v*R[2],1];
        R:=E![Frobenius(R[1],Fp,i),Frobenius(R[2],Fp,i),1];
        R:=E![W^i*R[1], R[2],1];
        R:=Et![1/u*R[1],1/(u*v)*R[2],1];
        return R;
end function;

/*short vector*/
h:=[6805583980011831246843429155154737955541954898798778055629810940952959221180,
    -27222335920852176602228201703762284779976173182889025754833553805152666081\
    984, -6805583980816682861126807226318111854139343802081469815856083238094457\
    589747, -3402791993225322082839654910893652541446122260206727854314003287536\
    482244732, 68055839775972764017088668928442324683546169727380017835602418221\
    13161073476, 340279199322532208303002391484194485009505356422162571206290154\
    1352168263155, 3402791993225322083601130927002013420250361330232009453578980\
    590557310556015];

/*test*/
Q:=Random(Et);
Q:=aut1(Q,5)-Q;
Q:=aut1(Q,1)+Q;
Q:=5*Q;

H0:=h[1]*Q;H1:=h[2]*Q;H2:=h[3]*Q;H3:=h[4]*Q;H4:=h[5]*Q;H5:=h[6]*Q;H6:=h[7]*Q;
R:=H0+aut2(H1,1)+aut2(H2,2)+aut2(H3,3)+aut2(H4,4)+aut2(H5,5)+aut2(H6,6);
R2:=r*R;
/*checking that R\in G2 and R is not the identity point*/
if R[3] ne 0 and R2[3] eq 0 then
  printf("G2 cofactor multiplication is correct!\n");
else
   printf("G2 cofactor multiplication is ERROR!\n");
end if;
